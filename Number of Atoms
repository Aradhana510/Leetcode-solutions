Given a string formula representing a chemical formula, return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.

For example, "H2O" and "H2O2" are possible, but "H1O2" is impossible.
Two formulas are concatenated together to produce another formula.

For example, "H2O2He3Mg4" is also a formula.
A formula placed in parentheses, and a count (optionally added) is also a formula.

For example, "(H2O2)" and "(H2O2)3" are formulas.
Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.

The test cases are generated so that all the values in the output fit in a 32-bit integer.

 

Example 1:

Input: formula = "H2O"
Output: "H2O"
Explanation: The count of elements are {'H': 2, 'O': 1}.
Example 2:

Input: formula = "Mg(OH)2"
Output: "H2MgO2"
Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.
Example 3:

Input: formula = "K4(ON(SO3)2)2"
Output: "K4N2O14S4"
Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.
 

Constraints:

1 <= formula.length <= 1000
formula consists of English letters, digits, '(', and ')'.
formula is always valid.


import collections
import re

class Solution:
    def countOfAtoms(self, formula: str) -> str:
        stack = [collections.Counter()]  # stack to keep track of atom counts at each level
        
        # Regular expression to match an atom and its possible count
        pattern = re.compile(r'([A-Z][a-z]*)(\d*)')

        i = 0
        while i < len(formula):
            if formula[i] == '(':  # new group starts
                stack.append(collections.Counter())
                i += 1
            elif formula[i] == ')':  # group ends
                # pop the top level and calculate the multiplier
                top = stack.pop()
                i += 1
                multiplier = 0
                # check for multiplier after ')'
                while i < len(formula) and formula[i].isdigit():
                    multiplier = multiplier * 10 + int(formula[i])
                    i += 1
                # If no multiplier, it defaults to 1
                if multiplier == 0:
                    multiplier = 1
                # Apply multiplier to all atoms in the current group
                for atom in top:
                    stack[-1][atom] += top[atom] * multiplier
            else:  # parsing atoms and their counts
                match = pattern.match(formula, i)
                atom = match.group(1)
                count = match.group(2)
                count = int(count) if count else 1  # default count is 1
                stack[-1][atom] += count
                i += len(match.group(0))
        
        # Now stack[-1] contains the final counts, sort them and build the result
        result = []
        for atom in sorted(stack[-1]):
            count = stack[-1][atom]
            result.append(atom + (str(count) if count > 1 else ''))
        
        return ''.join(result)
