Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.

The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.

 

Example 1:

Input: expression = "-1/2+1/2"
Output: "0/1"
Example 2:

Input: expression = "-1/2+1/2+1/3"
Output: "1/3"
Example 3:

Input: expression = "1/3-1/2"
Output: "-1/6"
 

Constraints:

The input string only contains '0' to '9', '/', '+' and '-'. So does the output.
Each fraction (input and output) has the format Â±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.
The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.
The number of given fractions will be in the range [1, 10].
The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.


SOLUTION

from math import gcd
class Solution:
    def fractionAddition(self, expression: str) -> str:

        def parse_fraction(s):
            num, den = map(int, s.split('/'))
            return num, den

        def lcm(a, b):
            return abs(a * b) // gcd(a, b)

        # Add a '+' at the beginning if the expression doesn't start with a sign
        if expression[0] not in '+-':
            expression = '+' + expression

        # Split the expression into fractions and operations
        parts = expression.replace('+', ' +').replace('-', ' -').split()
        
        result_num, result_den = 0, 1

        for part in parts:
            op = part[0]
            num, den = parse_fraction(part[1:])
            
            # Find LCM of denominators
            new_den = lcm(result_den, den)
            
            # Adjust numerators based on new denominator
            result_num *= new_den // result_den
            num *= new_den // den
            
            # Apply operation
            if op == '+':
                result_num += num
            else:  # op == '-'
                result_num -= num
            
            result_den = new_den
            
            # Simplify the fraction
            g = gcd(abs(result_num), result_den)
            result_num //= g
            result_den //= g

        # Handle the case where result is 0
        if result_num == 0:
            return "0/1"
        
        return f"{result_num}/{result_den}"
