You are given a binary array nums of length n, a positive integer k and a non-negative integer maxChanges.

Alice plays a game, where the goal is for Alice to pick up k ones from nums using the minimum number of moves. When the game starts, Alice picks up any index aliceIndex in the range [0, n - 1] and stands there. If nums[aliceIndex] == 1 , Alice picks up the one and nums[aliceIndex] becomes 0(this does not count as a move). After this, Alice can make any number of moves (including zero) where in each move Alice must perform exactly one of the following actions:

Select any index j != aliceIndex such that nums[j] == 0 and set nums[j] = 1. This action can be performed at most maxChanges times.
Select any two adjacent indices x and y (|x - y| == 1) such that nums[x] == 1, nums[y] == 0, then swap their values (set nums[y] = 1 and nums[x] = 0). If y == aliceIndex, Alice picks up the one after this move and nums[y] becomes 0.
Return the minimum number of moves required by Alice to pick exactly k ones.

 

Example 1:

Input: nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1

Output: 3

Explanation: Alice can pick up 3 ones in 3 moves, if Alice performs the following actions in each move when standing at aliceIndex == 1:

At the start of the game Alice picks up the one and nums[1] becomes 0. nums becomes [1,0,0,0,0,1,1,0,0,1].
Select j == 2 and perform an action of the first type. nums becomes [1,0,1,0,0,1,1,0,0,1]
Select x == 2 and y == 1, and perform an action of the second type. nums becomes [1,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [1,0,0,0,0,1,1,0,0,1].
Select x == 0 and y == 1, and perform an action of the second type. nums becomes [0,1,0,0,0,1,1,0,0,1]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0,0,1,1,0,0,1].
Note that it may be possible for Alice to pick up 3 ones using some other sequence of 3 moves.

Example 2:

Input: nums = [0,0,0,0], k = 2, maxChanges = 3

Output: 4

Explanation: Alice can pick up 2 ones in 4 moves, if Alice performs the following actions in each move when standing at aliceIndex == 0:

Select j == 1 and perform an action of the first type. nums becomes [0,1,0,0].
Select x == 1 and y == 0, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0].
Select j == 1 again and perform an action of the first type. nums becomes [0,1,0,0].
Select x == 1 and y == 0 again, and perform an action of the second type. nums becomes [1,0,0,0]. As y == aliceIndex, Alice picks up the one and nums becomes [0,0,0,0].
 

Constraints:

2 <= n <= 105
0 <= nums[i] <= 1
1 <= k <= 105
0 <= maxChanges <= 105
maxChanges + sum(nums) >= k  

SOLUTION

class Solution:
    def minimumMoves(self, nums: List[int], k: int, max_changes: int) -> int:
        one_indexes = [index for index in range(len(nums)) if nums[index] == 1]
        min_moves = float('inf')
        if max_changes >= k: # with 0 step 2
            min_moves = 2 * k

        prefix_sums = one_indexes.copy()
        for i in range(1, len(one_indexes)):
            prefix_sums[i] += prefix_sums[i - 1]

        def get_sum(left, right):
            if left > right:
                return 0
            if left == 0:
                return prefix_sums[right]
            return prefix_sums[right] - prefix_sums[left - 1]

        min_step_twos = max(1, k - max_changes)
        # step_twos is the number of times using step 2
        for step_twos in range(min_step_twos, min_step_twos + 3):
            if step_twos > k:
                break

            for left in range(len(one_indexes)):
                right = left + step_twos - 1
                if right >= len(one_indexes):
                    break

                stand_index = (right + left) // 2
                # number moves that using step 1
                curr_moves = (k - step_twos) * 2
                # total distance from mid to right
                curr_moves += get_sum(stand_index + 1, right) - (right - stand_index) * one_indexes[stand_index]
                # total distance from left to mid
                curr_moves += (stand_index - left) * one_indexes[stand_index] - get_sum(left, stand_index - 1)

                min_moves = min(min_moves, curr_moves)

        return min_moves
