Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].



SOLUTION


from typing import List

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        
        # Mapping digits to their corresponding letters
        phone_map = {
            '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
            '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'
        }
        
        # Helper function to generate combinations using backtracking
        def backtrack(index, current_combination):
            # If the current combination is the same length as digits, it's a valid combination
            if index == len(digits):
                result.append(current_combination)
                return
            
            # Get the letters for the current digit
            letters = phone_map[digits[index]]
            
            # Recur for each letter corresponding to the current digit
            for letter in letters:
                backtrack(index + 1, current_combination + letter)
        
        # Result list to store the combinations
        result = []
        # Start backtracking from index 0 and empty string
        backtrack(0, "")
        
        return result

