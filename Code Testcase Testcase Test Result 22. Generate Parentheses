Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8


SOLUTION

from typing import List

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        result = []

        def backtrack(current_string, open_count, close_count):
            # Base case: if we've used n opening and n closing parentheses
            if open_count == n and close_count == n:
                result.append(current_string)
                return

            # Add an opening parenthesis if we can
            if open_count < n:
                backtrack(current_string + '(', open_count + 1, close_count)

            # Add a closing parenthesis if we can
            if close_count < open_count:
                backtrack(current_string + ')', open_count, close_count + 1)

        # Initial call to backtrack
        backtrack('', 0, 0)
        return result
